<?xml version="1.0" encoding="UTF-8" ?>
<subject>
<name>John Craig</name>
<interview>
<interviewee>1967 probably and so that was the beginning of the fascination and then when I myself made it to high school, there was a science fair thing and I built a robot in the style of the walking plywood box and so I was the kid with the robot in high school, but that was like 1971, so this is still going back pretty far and then I went off to college at RPI in Troy, New York, and in my mind I always wanted to build robots in the basement and my idea was get a job, get a real job and then in the basement I'd build robots to keep myself happy.  By the time I interviewed for jobs around 1977, there actually were robots in factories.  There were starting to be robots and so it suddenly dawned on me, "Hey, maybe I can get actually a job in robotics."  So I started looking for that and I interviewed at places that were using robots like Procter and Gamble and so forth, but I finally took a job at JPL in Pasadena because there was a research group doing research on robots and I thought that would be even better.  So that was really the beginning at JPL, NASA JPL in Pasadena, and my initial mentor was Marc Raibert who had recently gotten a Ph.D. at MIT and he went to JPL and he hired me and I came into his little group and the very first thing he did is showed me this six-axis force sensor that Vic Scheinman had designed and had a robot there.  They had a Scheinman arm.  Scheinman had made like three arms originally.  Two were at Stanford, one was at JPL and Marc said, "Okay, we've got to figure out how to do something with this force sensor and this arm," and that was the beginning of that and we did a literature search and read every paper written about force control at that time in the late ‘70s and there were only about a dozen papers as I recall and they were written by people like Bruce Shimano had written something.  Dr. Inoue from Japan had written something and a few other folks.  Not much stuff out there.  So Marc and I worked for a year and that led to this thing called the hybrid position force control system and we wrote a paper.  Marc and I wrote two papers on that, one in ‘79 and I think one in ‘81 and I think those papers were highly cited and something I guess I'm proud of and it was basically one of the-- I think we were some of the early people that were doing things sort of in Cartesian space and formulating the control that robot in Cartesian space fundamentally instead of in the joint space in the mechanism and that wasn't happening too much back then.  At the same time, unbeknownst to me at that time this fellow, Oussama Khatib over in France was doing something similar and formulating the dynamics of the robot in Cartesian space.  So later when I met Dr. Khatib that's when we could marry this all together and it became a beautiful thing doing force control and motion control in Cartesian space.  So but that was the start of it.  So that one year with Marc Raibert at JPL was good.  My second year, things got shuffled a bit at NASA and I had sort of a new mentor who was this fellow named Carl Ruoff and he had worked at Bendix doing industrial robots and of course the industrial people, especially in the ‘70s were keeping everything hush-hush.  Back then rather than buy a robot from some robot company, you sort of made your own robots.  So Bendix had their own robot group and Texas Instruments I consulted for once had robots internally.  It was kind of a crazy thing in retrospect that each company would try and design and build their own robots.  Pretty soon that got sorted out that there should be these things called robot companies that made the robots that they use.  Carl had done all this great stuff at Bendix, but they weren't allowed to publish and no one ever knew about Carl Ruoff, but he was a great teacher and I learned a lot of stuff from him, particularly in programming languages for robots and all the geometry of how you set up vision systems with robots.  They were doing vision-guided robotics and stuff at Bendix back in the ‘70s and no one knew about it.  So basically the JPL years were one year with Marc Raibert doing force control and one year with Carl Ruoff doing programming languages and I read this thing called JARS which stood for JPL Autonomous Robot System, but it was a programming language for robots which was also popular back in the late ‘70s that was a legitimate thing to do as research is to develop a new robot language, which also at some point got to be goofy.  There's a lot of ways they do it now, but back in the day we were developing new robot languages every other week.  So we did that and then at some point at NASA, most of the people I was working with had Ph.D.s and my wife said, "John, got get a Ph.D. because you like this stuff," and I started looking around and it turns out at Stanford they actually had more robots and more computers than NASA did at that exact time.  So I said, "Hmm, I could just go keep doing the same stuff with better tools at Stanford and do it for N years and I'd get a degree at the end too," so I went off to Stanford.  Actually, nearly went to MIT.  Nearly went to Purdue.  Lou Paul who's a well-known guy was at Purdue at that exact instant and I was about to go out to Purdue because I was so enamored with working with Lou Paul, but just as the decision was coming, he called me and told me he's going to leave Purdue, so I decided not to go there just for him and MIT was attractive and I was accepted there, but I finally settled on Stanford and my thesis advisor was Tom Binford who's well known for doing computer vision stuff and he was in the computer science department.  I was always an electrical engineering student, but doing my research in CS department.</interviewee>
<interviewer>Were you in EE in RPL as well?</interviewer>
<interviewee>Yeah, I was in EE at RPI and at Stanford and so the robotics lab at Stanford was this wonderful place at that time.  It had just a few years earlier been off campus and there are a lot of these stories from the real old days at Stanford AI lab when it was off in the woods near Stanford.  You might have heard some of those stories.  When I got there it had just moved to campus.  It was in the basement of the computer science department, so it was a bit more mainstream, but there were all these fascinating characters there and that's where I also met Oussama Khatib.  He just came as a post-doc at the same time I started at Stanford and Ken Salisbury was there.  He was a few years ahead of me, so he was working on his thesis and I got involved-- one of the first things I did there was work with Ken Salisbury on his three-fingered hand that he had built, tendon-controlled hand, and I helped Ken write the software that controlled the hand and we got the fingers to wiggle for the first time and all that stuff.  That was a lot of fun and Ken was a great guy to work with and learn from.  He was a mechanical engineer, so I was starting to learn through osmosis more about mechanics.  I was pretty much on the control side of things generally.  And the other thing at Stanford at that time they had their robot control language and they were rewriting it from some old assembly language into I think Pascal or something back then and I was rewriting all the control side of that and that was code that originally Bruce Shimano had written and Lou Paul had worked on and other people.  So I was pretty involved in all of that and then let's see.  What happens next?  At Stanford I took the introductory robotics course like everyone else did and Professor Bernie Roth was teaching that and he was a fun guy to learn from.  So I got to know Bernie and I would just take that class every year even though I'd already taken it for credit, just sit in it.  I was also fascinated with seeing how someone teaches robotics and how one puts that material out, so I had this sort of growing interest in education and how you write about the stuff and how you teach it and how you make it interesting and what it is is a subject _______ made up of some mechanics and some control theory and some electronics and some computer science and so it's kind of a neat thing and I like the way Bernie taught it, so I'd go listen.  And then there was this--</interviewee>
<interviewer>Sorry, how did he teach it?  What was different about __________?</interviewer>
<interviewee>Well, I guess Bernie's a lively guy from New York originally and talks with his hands a lot and is just a kind of crazy guy and fun to listen to and I always remember some other students in the back room would go, "Oh this guy makes me nervous," because they were like laidback Californians and they thought, "Oh this guy makes me nervous to watch him teach," but for me it was like great and made it exciting.  So it was just kind of more of the human side, I think, that you felt Bernie's humanity and you enjoyed being in his presence.  I certainly always did and so there was this fateful day when I heard Bernie was going to go on sabbatical the following year, like maybe 1983 or ‘84 and I said, "Oh who's going to teach the course when you're gone?" and he right away said, "Oh you could," and I went, "Oh," and I was kind of-- but I said yeah right away.  "Okay, yeah.  I'll teach the course."  And the course was kind of a big deal.  There were like 80 students in the classroom and it was televised out to Silicon Valley companies.  There were like another 80 watching it out there, so it's a pretty big deal and graduate level course Stanford and I'd never taught before, so I was sort of a little bit terrified and I had nine months before it started the next year, so that's actually what led to me writing this textbook on robotics because I thought okay, if I'm going to teach this, if I hand out written notes at each class, I'll know the material cold because I wrote the notes and that'll help me get through this adventure of teaching this thing.  The only book at that time was really a book by Lou Paul and that's the one Bernie had used.  So I drew on that quite a bit when I wrote my own book, but that's what I did.  I wrote a chapter-- it was a ten-week quarter at Stanford and I would give a chapter out each week for the class and so that became the ten chapters of the first edition book.  Later it went up to 13 in the second edition, but so I taught the class and that got me kind of into teaching and as I said I was fascinated with how one teaches this stuff and wanted to try and do that well.  And it was right-- I think now this is ‘83-‘84.  Robotics is pretty hyped up.  Like I recall at that time there were several covers of "Time" magazine about robotics and it's going to take over the factories, it's going to make all of our cars cheaper, and it wouldn't be weird at Stanford in the robotics lab to see someone you'd recognize like a national newsperson coming in to try and interview people and I got interviewed once by I think John Stossel or some of these characters that were cruising around and so it was really hyped up and so I was just teaching this class, minding my own business with the notes and book publishers started showing up saying, "We'd like to get your notes and make a book," so I was flattered and I hadn't really thought of writing a book prior to that.  By the end of that quarter I had 13 offers to publish the book.  I don't think they would fight over a robotics book these days like that, but this was the good old days.  There weren't many books and it was hyped up and so I finally signed up with-- actually I called Addison Wesley and I said, "Hey, I've got 12 other offers and you guys have not shown up."  Because I talked to some professors at Stanford and they said, "Oh Addison Wesley's the best company to work with," so I called them.  I was getting cocky and so Addison Wesley showed up and took me to lunch and I signed with them and they published the book and so that was a long-- and then it took another couple years to turn the notes into a book, so the book came out in ‘86, about the same time I graduated Stanford.  So the book was a big deal and a lot of work and then it did turn out well, which is good, because I guess you can work just as hard and have a flop.  The book in the late ‘80s and into the mid-‘90s had something like 80 percent market share for people teaching robotics.  And then everyone else started writing books and there got to be a flood of books and probably the market share is down now.  I don't actually know what it is now, but it's still going.  It's in the third edition, so that was a good experience writing the book.</interviewee>
<interviewer>How was your book different from Lou Paul's book?</interviewer>
<interviewee>Well, interesting.  Lots of little things that might be too nitty to get into, but I was definitely-- the thing that's interesting about the book and it might be wrong for some people is that I was trying to teach this thing in ten weeks and so we do all of dynamics in one week and we do all of control theory in one or two weeks and crazy stuff like that.  Now at Stanford there's a three-quarter sequence for dynamics.  If you really want to learn dynamics, you study it all year and it's hardcore stuff and I wanted a way to teach everything in this class even if you had no background in mechanics when you started.  So how do you teach mechanics in a week?  And so I did it in a way that's just totally tied into and amenable to a serial chain of links which most robots are and if you kept in that little domain, there was a way you could formulate dynamics and that way you could make it understandable within a week and it built on the previous week which is about this thing called a Jacobian matrix that's all about velocity analysis of robots and that also was-- the way I did it was all based on the serial chain nature of the linkages and so if I did it just right, I felt I could teach velocity analysis in one week, dynamics the next, and people could follow that had basically no background.  So and the book mirrors that.  So that's what I think I was proud of.  Again my interest in how you teach these things and how you make it through and actually Bernie Roth would always tease me that he would say some sort of backhanded compliment like, "When you take a classroom, John, at the end you think you've learned something."  Because I had a way of sliding stuff in, wrapping it up and getting these things across I think and then the next week the students realize, "Oh, I don't know how to do anything in dynamics," but you know.  So the book was-- that was what I was trying to do with the book, make it coverable in ten weeks and cover all these things and it was also sort of a computational book because back at that time I was writing robot software control codes and working as a consultant.  In those days you could get these high-paying jobs in industry just because you could do kinematics, which again these days you can't do that.  So the book is also very mechanistic like if you really wanted to sit down and write your own robot control language, you could do it by going through the book.  I mean the book is not just sort of theoretical like there's some way to make this thing called Jacobian.  It shows you literally here's how you write code to make it Jacobian.  So those are some of the things the book hit on.  </interviewee>
<interviewer>Where were most of your students from?  Or do you have a feeling for what department they--</interviewer>
<interviewee>The students taking that class back then?</interviewee>
<interviewer>Uh-huh.</interviewer>
<interviewee>I think it was something like 80 percent mechanical engineering.  It was listed as an ME class and then sort of cross-listed in other departments.  So and most of the book material is ME stuff and that's why it was kind of weird because I was a EE and I was working in the CS department, but I wrote this book that's kind of mechanical engineering and around this time I also switched advisors from Tom Binford to Bernie Roth.  So the last couple years-- I spent six years at Stanford.  Actually the last two or three I was with Bernie as a student and so then I was sitting in the ME department.  So that's what robotics is.  It's interdisciplinary and sort of mixed up and now along in there too one summer I went and worked for GM at the tech center in Warren, Michigan and the guy that hired me, his name is Steve Holland and the other fellow there who was Bob Tylov [ph?] was my direct boss and they were in a way mentors.  Not so much in the technology side, but sort of American industry and big auto and what's going on with robotics there and Steve Holland is still at GM and that might be someone interesting to talk to and so I was just there a summer and I basically-- I think they were hoping to hire me long term afterwards, which in the end didn't happen, but so they were very nice to me.  They sort of bent over backwards.  I said look-- and that was just before I was going to start teaching in the fall and I said, "Look, I'm really working on notes for this course I'm going to teach at Stanford," and they said, "You can just work on those notes.  Just come here, sit at GM, but work on those notes."  That's kind of what I did and I wrote a paper along the way and a paper on adaptive control stuff.  So that was one little experience at GM and then back at Stanford and so then I was working on the thesis, so my thesis work at Stanford was on adaptive control of robots and there was a bit I had done at GM, but there was a different bit that I mostly did at Stanford and stuff I'm pretty proud of too.  It's really-- to get a thesis at Stanford you have to do something kind of heavy and mathematical.  At least that's what I thought at the time and so that's what I did, so this was the most sort of advanced mathematical stuff I did as far as pushing myself, but it was all good stuff.  It was a control scheme where the robot was controlled utilizing a full dynamic model of the dynamics of the robot and it would learn the parameters that appeared within that model and that was different than-- there at that point had been a hundred papers written on adaptive control of robotics, but what was different is a lot of the authors said, "Oh the dynamics of robotics, it's too hard."  They throw up their hands, so we can't possibly compute it; we have to just kind of adapt for it.  But that would usually lead you down a road where you'd get a low performance control system.  It was trying to adapt and keep up with every time the arm changed configuration _______ to get effective inertia as each joint is changing.  So they were just trying to keep up with all that.  The better approach that I was doing was I had a structural model.  I said okay, I'm not afraid to compute the whole dynamic model of the arm.  I know the nature of the structure of that model.  I just don't happen to know what the massive link to is or what the friction in Joint 3 is and so what I was identifying were fixed numbers as the arm moved.  I wasn't trying to update numbers changing with configuration and I think that gets you to a way that's more performant and also fits into some other control ideas that were going on at the time, the model-based reference control ideas.  So that's what I did for my thesis and Addison Wesley then, they were all thrilled because the book did quite well.  They wanted to publish my thesis, so they published my thesis as a book called "The Adaptive Control of Manipulators," and that, unlike the main book, sold like 500 copies.  It would only sell to weird guys at universities, whereas the book sold a lot more to general students.  So we did that and to implement my adaptive control ideas, I asked Brian Carlisle at Adept Robotics, "Could I come over to your place and use one of your robots and do this?"  So he said yeah.  So I went over to Adept and worked there in evenings and broke one of his robots once.  He wasn't too happy, but it's research science.  So I did that over at Adept and then so I knew Brian for years.  I had met him earlier at conferences and around Stanford.  So he was a mentor in a way too and then he'd show up later in my life again after that.  So then let's see.  I guess I graduated from Stanford and what happens right around graduation time is the folks at Berkeley invited me to come up and give a talk and so I went up and talked about my thesis and one of the fellows in the audience is this guy named Stephen Boyd who is now faculty at Stanford actually.  He was just finishing his Ph.D. at Berkeley and he's like a control theory guy and he sort of spotted an error in my mathematics of my thesis which he told me about sort of during the talk, so it was sort of frightening, but he said but everyone knows a solution to this problem.  It's been published in literature how you fix this little flaw, so we'll show you after your talk.  So they helped me fix that.  That was kind of neat.  So I got to be kind of buddies with him and some of the Berkeley folks and a few days after I gave that talk, Berkeley called up and said, "Hey, we've got a faculty slot for you here," and so I was sort of flattered.  I really wasn't planning to go into teaching.  I was planning to go into industry.  Had some buddies, we wanted to start a company in Silicon Valley, but I was so flattered that I said yes to Berkeley and then there was about a six-month period where I'm finishing my thesis at Stanford and telling Berkeley I'm coming, but as that went on, my buddies in industry kind of talked me into just going with them.  We're going to make a million dollars with this startup company in Silicon Valley, so sheepishly one day I called Berkeley and said no, I'm not going to come after all.  And so that was a hard decision because that would've been a nice path.  So there's a fellow at Berkeley named Ron Fearing who's there now.  He was from Stanford also.  He basically got the slot that I left open.  So I hope he appreciates that.  He's there now with tenure and having a great life.  So and so then we started a little company called Silma, S-I-L-M-A, and it was one of these-- it was like the first company that made 3D simulations of robots in factories so you could program them offline in the virtual world.  They didn't call it the virtual world back then, but that's what we call it now I guess.  So simulate robots, get them all working in the computer and then press a button, code goes down to the real devices and they do the same thing on the factory floor.  So we used CAD models of cars and teach robots how to spot weld without tying up the factory.  So it was the next way to program robots because back at that time, and I still kind of think it's true, I used to say the world doesn't need a robot that's twice as fast or twice as strong.  It needs a robot that's twice as easy to program because robots were not living up to the promise because to put in a robot to replace a worker you'd have to hire a higher-cost programmer to get it to do its thing and so it wasn't sort of working out economically.  So I think the action is in like sensors and software programming systems, make them easier programming more tied into CAD and other factory automation stuff.  So that's what we tried to do in a little company.  The little company went along for ten years and then got purchased by Adept eventually.  So we became a division of Adept and that's when I sort of hooked up again with Brian Carlisle and he was a great proponent of sort of pushing the technical side of robotics in the industrial world.  Because the industrial robot companies, some of them were pretty stodgy.  They were coming from machine tool building background, but Brian was always forward thinking and trying to get things like force sensing into the real world and so forth.  </interviewee>
<interviewer>Who was with you at Silma?</interviewer>
<interviewee>I'm sorry?</interviewee>
<interviewer>Who was with you at Silma?</interviewer>
<interviewee>At Silma the main technical guy was a fellow named Chris Goad who was a Ph.D.  I guess he was a Ph.D. from Cornell.  He came to Stanford and did a post-doc, so I met him at Stanford as a post-doc and he's the sort of computer science genius guy.  I mean if people ask me who have I worked with who I think is a genius, he's the first guy that comes to mind and not too many others, really.  Because he was just-- he invented this new language that we used at Silma called Sil [ph?] which in retrospect, bad idea to invent your own language and base a company on it, but it was basically Java before the guys invented Java and it was kind of part of C++ before C++.  Kind of he was one of these guys that if he'd been at the right place, he was a contemporary of the guys that invented C++ and Java and he was their equal or better and so he made this thing called Sil.  We just used it in our little automation company and it was a lot of fun and I learned a ton about computer science by working with him, but so yeah and then that became part of Adept and Adept was Bruce Shimano, Brian Carlisle, so I worked with them for seven years and then eventually left Adept and this is almost up to the real time now and just a few years ago and then Bruce and Brian actually left Adept as well and they have a new company called Precise Automation now.  So I left a little bit before they did, but there were some things going on at Adept that made us all leave.  So that's the quick synopsis.</interviewee>
<interviewer>What ______________________ do at Adept?  What kind of projects?</interviewer>
<interviewee>Well it was always in the context of trying to do this offline programming system in the virtual world and the thing was it's hard enough to program a robot and that's what we were trying to conquer, this problem to make it easier to program a robot.  It's hard enough to program robots when you've got it there and you can understand the 3D geometry of how it's got to reach around this thing to get the spot weld in here.  When you're trying to do it on a flat computer screen, it's not necessarily easier.  It's almost kind of harder, so we're trying to make this somehow easy, but are we getting there?  So I was focused on how to make this stuff easier and so in the end at the Silma division of Adept, I worked on a product called Rapid because it was supposed to be so rapid to install automation, called Rapid, so and there was just a lot more-- it was kind of object-oriented and things in the little simulator world knew how to do certain things.  You could take conveyor belts and kind of snap them together and parts would know how to flow onto them.  We could simulate vision systems and parts knew how to tumble because some part feeding things have parts tumbling and they come up from different so-called stable states and the vision system looks at them.  If they're right-way-up, the robot can pick them up and I should say this is when I worked with Ken Goldberg who's now at Berkeley.  He came out.  He actually lived in a crazy trailer parked on our property up in the mountains for a while as we were collaborating.  He had an algorithm that would compute stable states of parts and so I put that right into this thing called Rapid that I had built and we could simulate that.  Also there was a lot of knowledge in the parts and how conveyors could snap together, how parts feeders could produce parts and all these things and then in the virtual world you could kind of snap these things together and press go and it would all start running.  It was very easy-esque compared to some sort of tedious programming you might do and then the thing that people found out about programming robots in factories is there's probably like ten percent of the code has to do with robots moving and picking, what you think of as robotics, and 90 percent gets to be controlling all the peripheral equipment and recovery of loops.  If an error happens, how do you back up and when do you signal the human to come fix it and when do you schedule the parts to get reloaded and all this sort of ancillary stuff.  So if you're just focused on traditional robotics and motion programming, you're missing where all the difficulty is.  So we were trying to address all that and that's what I mostly did at Adept after they bought Silma and with Ken.</interviewee>
<interviewer>What kind of stuff were you working on at JPL and how did you wind up at JPL?</interviewer>
<interviewee>Well JPL, that's when I was first looking for a job in robotics and I interviewed at places.  I remember a famous story.  I interviewed at Procter and Gamble in Cincinnati.  They were getting robots to work in the factory line and where they were actually automating their line that made tampons and there was a problem with the string not being the right length or something and they wanted to have a vision system in robots and I just thought, "Do I want to devote my life to working on tampon production?" and at the same time I've got this offer from JPL which is like research, NASA, robots in space.  Okay, I'm going there.  So I went out there and the first big project was the hybrid position force control and someplace there is a video-- I think Oussama will have it-- of a robot sort of shakily dragging a pin across the surface and putting a pin into the hole.  That was the big thing back then is robots were good in free space like spray painting cars, but if they had to touch things and impart forces on things, they would just break stuff.  So we wanted for a robot to put a pin in a hole or a bolt on a nut you had to feel forces and not let them jam up.  So the big famous experiment was I got this robot to put a pin in a hole and we had one hole with a big ________ that was easy and one with no _________ that was harder and the robot could do that and there's a video of that somewhere and that's from like 1978.</interviewee>
<interviewer>What kind of robots were you using for that?</interviewer>
<interviewee>That was a Scheinman arm.  He had-- I think at that time there were just three.  There were two at Stanford called the blue arm and the yellow arm and then there was one at JPL which was a longer one that was kind of special and it was built on the front of a rover.  This was the group at JPL which is the great ancestor of the group today that sent the rovers to Mars.  Back then it was like a car-size rover with this Scheinman arm on the front of it that could reach down and pick up rocks and stereo cameras and vision stuff.  So most of the group was doing like rover stuff and vision and there was just me and Marc working on the arm, Marc Raibert. </interviewee>
<interviewer>Who else was in the group?</interviewer>
<interviewee>Well there were these vision guys, Bob Cunningham and Ray Eskenazi.  I don't even know where they are these days.  Those are the guys I remember.  Well Tony Bakesy [ph?] who's a well-known guy was at JPL at the same time.  There was a second-- there were two groups at JPL.  There was the autonomous robot group which I was in and then there was like the teleoperator group and Tony Bakesy headed that group and he had done some great work in dynamics and things that we all knew and he was one attraction for me to go to JPL because I had already heard of him and he had a group.  Each group was about 12 people I think and they were sort of sister groups there and let's see.  What else was I just ________ something else.  I can't remember it now.  Something else.  Oh, I was going to say going way back to RPI, I did undergraduate and then I did a fifth-year graduate thing so you can get your master's after five years.  There was a project way back then funded by JPL NASA at RPI for a Mars rover and at RPI there might still be some lore around about the Mars rover project because it was kind of well known back then, 1976-77, that era, and it was this kind of four-wheeled vehicle.  We'd take it out and drive around the campus of RPI.  It was amazing because it was kind of before there were like PCs and microcomputers, so it was all threaded, boarded, hard-wired chips to make our own computer effectively and it had this laser rotating each side of the mirror and collecting data and looking out for obstacles.  So it was an early example of something trying to pick its way through a boulder field and I worked on that a little bit when I was a junior and then when I was in my fifth year I was in charge of like the electronics side of that thing and there was a professor named Steve Yerazunis who headed that and he was a good sort of money raiser and Yerazunis got funding out of NASA JPL for this rover and that's how I eventually knew of JPL and got an interview with JPL because I had worked on the rover they were funding at RPI and that rover is featured in one episode of this TV show called "Cosmos" that Carl Sagan did and this was a cool thing when we were master's students at RPI.  Two of us got to go out to Death Valley with the machine because we had to ________ remotely from off camera and keep it going and Carl Sagan was there and he filmed this episode where it looked like he's on Mars and this Mars rover drives around and that's the rover I worked on at RPI and I met Carl at the salad bar in the hotel and he started talking about how it's interesting that biological systems never evolved wheels because it's hard to get blood vessels and things through a continually revolute joint, so maybe rovers shouldn't have wheels; they should have legs.  And so that was cool.  I got to meet Carl and then Marc Raibert at JPL who hired me essentially and I worked with on force control, I mentioned my second year at JPL I kind of worked with Carl Ruoff in programming languages.  Raibert got interested in hopping machines and started working on hopping machines and I remember going over to his house one day for a picnic and he has a pogo stick and he's like hopping around in his backyard and he says, "Oh it's just something I'm working on," and he wouldn't tell me in the very beginning what was going on and I thought he was just acting nutty, but then he got into doing leg locomotion and hopping and was at CMU for a long time and the leg locomotion lab was his at CMU and I think he then started a company called Boston Dynamics.  He's at MIT now part time _____________.  So yeah, that's another piece of the story there.</interviewee>
<interviewer>So what did you do after Adept?</interviewer>
<interviewee>Well, after Adept I worked for-- well, let's see.  Yeah, as Adept winded up, I worked for a small company called Invenios in Santa Barbara and it's kind of a robot company.  They make little, tiny, very high-precision-- they make a little stage that just moves in X and Y and its total range of motion is like two millimeters, but it can do it to like 30 nanometers or something, so crazy precision, and I worked specifically on encoder technology to measure where this thing was and I actually designed an encoder which is pretty cool that uses-- a lot of old-fashioned encoders are sort of resister ladder networks or just sort of fixed.  Our encoder had a DSP in it so it was programmable and we could do all kinds of fancy compensation and it could learn and improve its performance over time and sort of adaptive control was always my thing since the thesis.  So we made these high-precision encoders that put out a million counts per revolution and could tune themselves up as they ran and so we did that sort of for little robo-like things, stages.  Actually that encoder got sold off to a company that built two degree of freedom camera positioning systems for security systems actually outdoors in parking lots to look around for criminals or whatever.  So it was kind of robotics, but it was more encoders, encoder technology.</interviewee>
<interviewer>Do they use that for chip manufacturing?  </interviewer>
<interviewee>They didn't.</interviewee>
<interviewer>_______ kind of _______ nanotechnology?</interviewer>
<interviewee>Yeah, a lot of the other-- all these little fine automation stages that they built, another part of that company's business was they had it's called photostructurable glass, so it's a special glass that's been doped with chemicals and if you shoot a UV laser at it or the UV hits it, it changes the glass into kind of a ceramic and you can then very precisely draw patterns and you can make things like the optical disk portion of an encoder, so we would build the glass disk part of the encoder with our own technology and then marry it with the firmware that I wrote the DSP and we'd make this incredible encoder.  But they got into making all kinds of things out of glass at a very small scale.  So they would call themselves a nanotechnology company, although it wasn't quite nano.  It was more like micro, but further where the glass was hit and turned into ceramic, if you then etched this glass in hydrofluoric acid, it eats away the ceramic part and leaves the glass.  So you could actually make things with little tiny channels in them and there's a way that you can _________ holes and different things so we could mix in little micro fluidic devices and so when they sequenced the human genome, at least one of the ways they do that, they have a little glass plate with all sorts of things and little channels running around and our company made that plate.  So that was our big sort of claim to fame and made a lot of money from that.  So the encoder technology and everything was sort of in support of putting a piece of glass on a positioner with a laser pointing at it and then moving the ___________ of the laser to draw these patterns.  It was actually at that company I wrote a whole robot programming language, once again, which was to control the laser and the robots and to do all this stuff and make it easy to program __________ interpret the language.  See, what was that called?  It was called IRS, Invenios Robot System, and we had vision systems, cameras looking through microscopes to check if things were in the right place and it was quite elaborate, several axes.  They also, that company built a six degree of freedom robot with very tiny actuators and a parallel mechanism with three legs coming up and it could manipulate things over a workspace of just a couple millimeters, maybe plus or minus 4 millimeters and plus or minus 30 degrees, but they did very fine positioning of optical fibers that had to be aligned with an LED or something and then bonded and that was-- so a six degree of freedom robot was also supported in my robot programming language along with all the stages.  So I worked at that company for about, I think, six years.  And then just a year and a half ago left them and now I work primarily on software for radiographs of animals.  So if you get your cat, dog, or horse X-rayed by a veterinarian, it's possibly using my software.  So I'm now doing image processing stuff to present the best looking image and markup measurement tools, calibration things.  So it's kind of _____________ veterinary radiology and then I help my wife with her company which is a plastic horseshoe company, so it's polyurethane horseshoes.  Better for the horse than the old steel shoes and so we have these two little companies going.  So I'm sort of an entrepreneur and still writing software these days.</interviewee>
<interviewer>And as somebody who's written a lot of—</interviewer>
<interviewee>Coat away on and then I used all his stuff in Miami product.  Also yeah high school robotics was probably not considered cool, I was the kid with the robot ever since I-- see actually what happens we .</interviewee>
<interviewee>There were two science fair projects we had to do that year, had to one like the first half of the year and one at the end of the year and as soon as the teacher announced that at the beginning of the year I said I'm going to make a robot, this is my chance to make a robot like my older brother had.  But I knew that it was going to take all year to do that.  So I said okay I need something for that first project.  So I made this lameoid thing which I got an A on because the teacher didn't know that I was a budding robotics genius and so he gave me an A on that and then at the end of the year I bring in this robot that  of arm, could walk, could follow a light beam, could talk a little bit, could do some of these things and it blew the teacher away and blew everyone away and then I was the kid with the robot.  That wasn't necessarily a good thing to be the kid with the robot but yeah.</interviewee>
<interviewer>It turned out well in the end.</interviewer>
<interviewee>It worked out, yeah.  Well up until then actually I was in high school, I thought well maybe I'm going to be a playwright, I wanted to write things and maybe I'll be a psychiatrist and all kind of crazy ideas but the robot thing I stuck with the whole year, every day, go down the basement and work on the robot.  That's when I decided okay this stuff is not going to jazz by itself, so maybe it makes sense to do this for a career.</interviewee>
<interviewer>What were some of the important conferences that you went to and how they changed through time?</interviewer>
<interviewee>Conferences, well let's see, the big one was the IEEE Robotics and Automation Conference and that was kind of a thing each year you wanted to go to, one to try and get a paper ready for.  So that was certainly-- I went to that many years in a row because I worked sort of on the control side there was a conference called the ACC American Control Conference and the paper Ken Salisbury and I wrote about the hand, actually won the best paper of the conference award, so that was memorable and then there was this International Journal of Robotics Research that started up and they had a by invitation only sort of symposium thing they did each year and so when I first got invited to that that was good, like I'd made the inner circle and that was actually held I think right around here in Monterey once.  So those are the ones I remember, IEEE, ACC and International Symposium on Robotics Research.</interviewee>
<interviewer>How would you define a robot, do you think that the notion of what a robot is has changed?</interviewer>
<interviewee>Well what I guess my standard answer to that and this is to back in the day I wrote the book, so maybe it's changed now a little bit but it's always been a gray thing, it's always been some sort of programmable machine, so basically it's a programmable machine but I think when you cross the line between it being hard automation and being a robot, just has to do with how sophisticated that programming is and certainly if the thing has a sensor on it, you can do something based on the sensor then that probably crosses the line and it's a robot.  But it needn't have a sensor, I think to be called a robot, if it's programmable and it's a machine that moves around a bit then I say it's a robot.  But there's this fine line because back in the day there were all sorts of fixed automation being driven by PLCs and I wouldn't call those robots, they're just two sort of hard coded and too simple in the software aspect of it.  So that's my vague answer.</interviewee>
<interviewer>What where you see robotics going in the future, what do you think are going to be some of the important challenges?</interviewer>
<interviewee>Well I still think and this has held for about 20 years now or so that the name of the game is trying to integrate sensors fully and integrate them in a way that makes robots easier to use.  You have to program to tell the machine what to do and for it to do its job and probably to do it in a way it's not too tedious as far as how we have to explain what it should do, it needs to use sensors and make some local decisions on its own.  So I think the name of the game as I mentioned before, robots don't have to be twice as fast or twice as strong, they have to be two times easier to program and get them doing useful work and I think the lynch pin to that is the successful integration of sensors when using that.  So I'm really fascinated by some of the work on manipulation, the guys that really-- like Nat Mason is one of the original guys doing a lot of this thinking how robots feel things, how they can push, slide and just manipulating the 3D physical world and how they get good at that and then early on I thought well our only hope is to make some sort of adaptive or learning component to it because it's going to be too hard for us to teach them everything about how to be a being in this world, they have to learn it on their own kind of thing.  So I think that area's still ripe for progress and is still the right thing to be working on, sensors, ways to program them, ways they can learn it on their own, all aimed at making them easy to use, that'll bring down the cost of using them and then they'll do more things for us.</interviewee>
<interviewer>You seem to have worked closely on industrial kinds of robots, so now there's a lot of discretion of having robots in even more unpredictable spaces like the real outside world, outside of labs, outside of factories kind of with regular people and regular spaces, does that ?</interviewer>
<interviewee>Yeah I think that's crazy hard, I mean getting robots out of factories and things is really challenging, so it's fun to see people trying to get that to happen.  In my point of view it's still so hard to make it happen properly in factories when you've got a controlled environment that wow to try and take them out and put them in an old person's home to help them or something like that is a big challenge, so yeah I think that's the way it has to go but it's one more-- it's harder than what we used to do, back in the day.  Nice structured environment in the factory, life's easy, life's good, you can do it.</interviewee>
<interviewer>You're right, ?</interviewer>
<interviewee>Right, yeah Mark Raybird got military funding for his hopping robots because wheeled robots can't like run through jungles necessarily, so they wanted to build the hopping robots that could hop over downed trees and all this sort of stuff.  He's going crazy, unpredictable things, but those robots needed to be mobile and hop around and get through strange places but all they did in the end was probably surveillance.  But you can imagine that could work.  Trying to have robots do that stuff plus be dexterous and be able to interact with things and do physical tasks that's really getting tough.</interviewee>
</interview>
</subject>
